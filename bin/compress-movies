#!/usr/bin/env node
//  Example: https://blog.logrocket.com/generating-video-previews-with-node-js-and-ffmpeg/

process.env.DEBUG = 'compress*'

const ffmpeg = require('fluent-ffmpeg')
const glob = require('glob')
const util = require('util').promisify
const fs = require('fs-extra')
const path = require('path')
const touch = require('touch')
const debug = require('debug')

// const log = console.log
const QUALITY = '22'

function getConvertedFileName(file) {
  return `${path.parse(file).name}-converted-${QUALITY}.mp4`
}

function convert(input, output) {
  return new Promise((resolve, reject) => {
    const log = debug(`compresss:${input}`)
    log('testson')

    ffmpeg(`./${input}`)
      .outputOptions(
        // Copy metadata
        '-map_metadata',
        '0',

        // Use x264
        '-vcodec',
        'libx264',

        // Quality settings
        '-crf',
        QUALITY,

        // Make it Apple/Quicktime compatible ( YUV planar color space with 4:2:0 chroma)
        '-pix_fmt',
        'yuv420p'
      )

      // .output(`${path.parse(input).name}-converted-${QUALITY}.mp4`)
      .on('progress', (progress) => {
        const { frames, currentFps, currentKbps, targetSize, timemark, percent } = progress // eslint-disable-line @typescript-eslint/no-unused-vars
        // log(`[ffmpeg: ${input}] ${JSON.stringify(progress)}`)
        log(`${Math.round(percent)}% - ${timemark} [ffmpeg: ${input}]`)
        // log('apa')
        // console.log('test')
      })
      .on('error', (err) => {
        log(`[ffmpeg] error: ${err.message}`)
        reject(err)
      })
      .on('end', () => {
        log(`[ffmpeg: ${input}] finished`)
        // Touch the output and preserve file dates
        touch.sync(output, {
          ref: input
        })

        resolve()
      })
      .save(output)
  })
}

async function run() {
  console.log('Scanning video files...')

  const files = await glob
    .sync('**/*.{MOV,mov,avi,AVI}')
    .filter((fpath) => !/converted/.test(fpath))

  console.log(`...${files.length} videos found`)

  const videos = files.map((file) => {
    // Take deep paths into considerations
    const p = path.parse(file)
    const input = path.join(p.dir, p.base)

    return {
      input,
      output: getConvertedFileName(input)
    }
  })

  // console.log(videos)

  // https://video.stackexchange.com/questions/23741/how-to-prevent-ffmpeg-from-dropping-metadata
  // exiftool -TagsFromFile a.MOV "-all:all>all:all" c.MOV

  const execute = Promise.all(
    videos.map((video) => {
      convert(video.input, video.output)
    })
  )

  // await Promise.all([videos])

  // for (const file of files) {
  //   console.log(path.basename(file))

  //   ffmpeg(`./${file}`)
  //     .outputOptions('-map_metadata', '0', '-vcodec', 'libx264', '-crf', '24', 'yadif')
  //     .output(file.replace('.MOV', '-converted-24.mp4'))
  //     .on('progress', (progress) => {
  //       console.log(`Processing: ${progress.percent}% done`)
  //     })
  //     .run()
  // }
}

run()
// touch.sync('test2.txt', {
//   ref: 'DSCF0323-converted-22.mov'
// })
