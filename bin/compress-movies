#!/usr/bin/env node
//  Example: https://blog.logrocket.com/generating-video-previews-with-node-js-and-ffmpeg/

process.env.DEBUG = '*convert*'

const path = require('path')
const ffmpeg = require('fluent-ffmpeg')
const glob = require('glob')
const fs = require('fs-extra')
const touch = require('touch')
const debug = require('debug')
const pmap = require('p-map')
const execa = require('execa')
const exiftool = require('exiftool-vendored').exiftool

const args = process.argv.slice(2)

const QUALITY = isNumeric(args[0]) ? args[0] : '24'
const DEINTERLACE = false
const STORE = { candidates: 0 }

const noop = () => {}

function isNumeric(value) {
  return /^-?\d+$/.test(value)
}

function getConvertedFileName(file) {
  const { dir, _base, name } = path.parse(file)
  const output = `${name}-q${QUALITY}${DEINTERLACE ? `-deinterlaced-1080-50` : ''}.mp4`
  return path.join(dir, output)
}

let i = 0
const DB = {}

async function convert(input, output) {
  return new Promise((resolve, reject) => {
    const log = debug(`[${++i}/${STORE.candidates}] convert:${input}`)
    const before = Number(fs.statSync(input).size)

    DB[input] = {
      input,
      output,
      startTime: new Date().getTime(),
      currentTime: new Date().getTime(),
      deltaTime: 0,
      size: {
        before: Number(fs.statSync(input).size),
      },
    }

    ffmpeg(`./${input}`)
      .outputOptions(
        ...[
          // Use x265
          '-vcodec',
          'libx265',

          '-tag:v',
          'hvc1',

          // https://superuser.com/questions/490683/cheat-sheets-and-presets-settings-that-actually-work-with-ffmpeg-1-0
          '-preset',
          'veryfast',

          // Quality settings
          '-crf',
          QUALITY,

          // Make it Apple/Quicktime compatible ( YUV planar color space with 4:2:0 chroma)
          '-pix_fmt',
          'yuv420p',

          // Copy metadata
          '-map_metadata',
          '0',

          // '-tune','film',
          // '-hwaccel cuvid',
          // Disable smoothing
          // '--selective-sao 0',
          // '--no-sao',

          // '-filter:v',
          // 'hqdn3d=4.0:3.0:6.0:4.5',
          // 'hqdn3d= 2:1:2:3',
          // 'nlmeans',

          // De-Interlace
          // DEINTERLACE && [
          //   '-vf', 'yadif=1:-1:0'
          // ],

          // '-vf', 'yadif=1:-1:0',
          // '-r', '50',

          // '-filter:v', 'minterpolate=fps=25:mi_mode=mci:mc_mode=aobmc:me_mode=bidir:vsbmc=1',
          // '-r', '30',
          // '-threads', '12',

          // Downscale to <XXX>p
          '-vf',
          'scale=-1:720',
          // '-vf', 'yadif=1:-1:0,scale=-1:1280',
          // '-vf', 'yadif=1:-1:0,scale=160:-1',

          //  <width>:<height>
          // '-vf', 'scale=1600:900',
          // '-vf', 'scale=1600:-1',
          // '-vsync', 'vfr',
          // '-filter:v', 'fps=fps=30',
        ]
          .flat()
          .filter(Boolean)
      )

      // .output(`${path.parse(input).name}-converted-${QUALITY}.mp4`)
      .on('progress', (progress) => {
        DB[input].currentTime = new Date().getTime()
        DB[input].deltaTime = DB[input].currentTime - DB[input].startTime

        const { _frames, currentFps, _currentKbps, targetSize, _timemark, percent } = progress
        const estimate = ((targetSize / percent) * 100).toFixed(0)

        const lpercent = Math.round(percent)
        const ltargetsize = (targetSize / 1000).toFixed(1)
        const lestimate = (estimate / 1000).toFixed(1)
        const lbefore = (before / 1000_000).toFixed(1)
        const ldiff = ((estimate / before) * 1000 * 100).toFixed(1)
        const ldelta = ~~(DB[input].deltaTime / 1000)

        // log(`» ${lpercent}% - ${ltargetsize} Mb - (~${lestimate} / ${lbefore}) ${output}`)
        log(
          `» ${ldelta} sec - ${lpercent}% - (${ltargetsize} / ${lestimate} / ${lbefore} Mb | ${ldiff}%) - ${currentFps} FPS`
        )
      })

      .on('error', (err) => {
        log(`[ffmpeg] error: ${err.message}`)
        reject(err)
      })

      .on('end', () => {
        console.log()
        const before = Number((fs.statSync(input).size / 1000_000).toFixed(2))
        const after = Number((fs.statSync(output).size / 1000_000).toFixed(2))
        const diff = ((after / before) * 100).toFixed(1)

        console.log(`  Before: ${before} MB`)
        console.log(`  After:  ${after} MB (${diff}%)`)

        // Touch the output and preserve file dates
        touch.sync(output, {
          ref: input,
        })

        console.log('-'.repeat(80))
        resolve()
      })
      .save(output)
  })
}

// Collect info
// ===
const candidates = async () =>
  glob.sync('**/*.{MOV,mov,avi,AVI,mpg,MPG,flv,FLV}').filter((fpath) => !/-q|Nikon/.test(fpath))

// const toAdd = candidates.filter(x => !existing.includes(x))

async function fileInfo(file) {
  // Take deep paths into considerations
  const p = path.parse(file)
  const input = path.join(p.dir, p.base)
  const output = getConvertedFileName(input)
  const exists = fs.existsSync(output)

  const exif = await exiftool.read(input)
  const date = exif.MediaCreateDate || exif.DateTimeOriginal

  // console.log(date.rawValue)
  // console.log(exif['CreateDate: ExifDateTime'])
  try {
    date.rawValue
  } catch (error) {
    // console.log('ERROR --------------')
    // console.log(exif)
  }

  // console.log(exif.CreateDate.year)

  return {
    input,
    output,
    exists,
  }
}

async function copyTags(input, output) {
  // Copy metadata - don't overwrite existing data
  // await execa('exiftool', ['-tagsFromFile', input, output, '-wm', 'cg'])
  await execa('exiftool', [
    '-overwrite_original',
    '-tagsFromFile',
    input,
    output,
    // Seems to only be used in images, not videos
    '-x',
    'ExifImageWidth',
    '-x',
    'ExifImageHeight',
  ])

  const tmpInfoFile = `${output}.txt`
  const newOutput = output.replace('.mp4', '-metadata.mp4')

  await execa('mp4extract', ['moov/udta', input, tmpInfoFile])
    .then(() => {
      console.log(`Found: moov/udta data available for: ${input}`)
    })
    .catch(noop)

  await execa('mp4extract', ['moov/meta', input, tmpInfoFile])
    .then(() => {
      console.log(`Found: moov/meta data available for: ${input}`)
    })
    .catch(noop)

  if (fs.existsSync(tmpInfoFile)) {
    console.log('Inject Metadata:')
    console.log('data:', tmpInfoFile)
    console.log('from:', output)
    console.log('to:   ', newOutput)
    await execa('mp4edit', ['--insert', `moov:${tmpInfoFile}`, output, newOutput]).catch(
      console.error
    )

    // Cleanup temporary files
    await fs.unlink(tmpInfoFile).catch(console.error)
    await fs.unlink(output).catch(console.error)
    await fs.rename(newOutput, output).catch(console.error)
  } else {
    console.log('Skip injecting metadata')
    // await fs.rename(newOutput, output).catch(console.error)
  }

  try {
    // await fs.unlink(output).catch(console.error)
    // await fs.rename(newOutput, output).catch(console.error)
  } catch (error) {
    // console.log(e)
  }
}

async function run() {
  console.log('Scanning video files...')
  const files = await candidates()
  STORE.candidates = files.length

  console.log(`...${files.length} videos found`)
  const videos = files.map(fileInfo)

  // https://video.stackexchange.com/questions/23741/how-to-prevent-ffmpeg-from-dropping-metadata
  // exiftool -TagsFromFile a.MOV "-all:all>all:all" c.MOV

  let j = 0

  const mapper = async (video) => {
    console.log(`🍿 ${++j}`.padEnd(5), video)

    if (!video.exists) {
      await convert(video.input, video.output).catch((error) => {
        console.log('---- ERROR ----')
        console.error(error)
      })

      await copyTags(video.input, video.output)
    }

    return video
  }

  await pmap(videos, mapper, { concurrency: 1 })

  exiftool.end()
}

run()
