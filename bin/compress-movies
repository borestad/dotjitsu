#!/usr/bin/env node
//  Example: https://blog.logrocket.com/generating-video-previews-with-node-js-and-ffmpeg/

process.env.DEBUG = '*convert*'

const ffmpeg = require('fluent-ffmpeg')
const glob = require('glob')
const util = require('util').promisify
const fs = require('fs-extra')
const path = require('path')
const touch = require('touch')
const debug = require('debug')
const pu = require('blend-promise-utils')
const pmap = require('p-map')
const execa = require('execa')

// const ExifTool = require("exiftool-vendored").ExifTool
// const exiftool = new ExifTool({ taskTimeoutMillis: 5000 })
const exiftool = require('exiftool-vendored').exiftool

const QUALITY = '24'
const DEINTERLACE = false
const STORE = { candidates: 0 }

function getConvertedFileName(file) {
  const { dir, base, name } = path.parse(file)
  const output = `${name}-q${QUALITY}${DEINTERLACE ? `-deinterlaced-1080-50` : ''}-x265.mp4`

  return path.join(dir, output)
}

function isInterlaced() {
  return new Promise((resolve, reject) => {})
}

function roundDown10(i) {
  return parseInt(i / 10, 10) * 10
}

let i = 0

async function convert(input, output) {
  return new Promise((resolve, reject) => {
    const log = debug(`[${++i}/${STORE.candidates}] convert:${input}`)
    const tmp = { lastPercent: 0 }

    ffmpeg(`./${input}`)
      .outputOptions(
        ...[
          // Copy metadata
          // '-map_metadata',
          // '0',

          // Use x264
          '-vcodec',
          'libx265',
          '-tag:v',
          'hvc1',

          // https://superuser.com/questions/490683/cheat-sheets-and-presets-settings-that-actually-work-with-ffmpeg-1-0
          '-preset',
          'veryfast',

          // '-tune','film',

          // '-filter:v',
          // 'hqdn3d=4.0:3.0:6.0:4.5',
          // 'hqdn3d= 2:1:2:3',
          // 'nlmeans',

          // De-Interlace
          // DEINTERLACE && [
          //   '-vf', 'yadif=1:-1:0'
          // ],

          // '-vf', 'yadif=1:-1:0',
          // '-r', '50',

          // '-filter:v', 'minterpolate=fps=25:mi_mode=mci:mc_mode=aobmc:me_mode=bidir:vsbmc=1',
          // '-r', '30',
          // '-threads', '12',

          // Downscale to 900p

          // '-vf', 'yadif=1:-1:0,scale=-1:1280',
          // '-vf', 'yadif=1:-1:0,scale=160:-1',

          //  <width>:<height>
          // '-vf', 'scale=1600:900',
          // '-vf', 'scale=1600:-1',
          // '-vsync', 'vfr',
          // '-filter:v', 'fps=fps=30',

          // Quality settings
          '-crf',
          QUALITY,

          // Make it Apple/Quicktime compatible ( YUV planar color space with 4:2:0 chroma)
          '-pix_fmt',
          'yuv420p',
        ]
          .flat()
          .filter(Boolean)
      )

      // .output(`${path.parse(input).name}-converted-${QUALITY}.mp4`)
      .on('progress', (progress) => {
        const { frames, currentFps, currentKbps, targetSize, timemark, percent } = progress // eslint-disable-line @typescript-eslint/no-unused-vars
        // log(`[ffmpeg: ${input}] ${JSON.stringify(progress)}`)
        const estimate = ((targetSize / percent) * 100).toFixed(0)
        log(`${Math.round(percent)}% - ${targetSize} Kb - (${estimate}) ${output}`)

        // log('apa')
        // console.log('test')
      })
      .on('error', (err) => {
        log(`[ffmpeg] error: ${err.message}`)
        reject(err)
      })
      .on('end', () => {
        console.log()
        const before = Number((fs.statSync(input).size / 1000_000).toFixed(2))
        const after = Number((fs.statSync(output).size / 1000_000).toFixed(2))
        const diff = ((after / before) * 100).toFixed(1)

        console.log(`  Before: ${before} MB`)
        console.log(`  After:  ${after} MB (${diff}%)`)
        // console.log(before, after)

        // Touch the output and preserve file dates
        touch.sync(output, {
          ref: input,
        })

        console.log('-'.repeat(80))
        resolve()
      })
      .save(output)
  })
}

// Collect info
// ===
const candidates = async () =>
  await glob
    .sync('**/*.{MOV,mov,avi,AVI,mpg,MPG}')
    // .sync('**/*.{mpg,MPG}')
    .filter((fpath) => !/-q|Nikon/.test(fpath))

// const toAdd = candidates.filter(x => !existing.includes(x))

async function fileInfo(file) {
  // Take deep paths into considerations
  const p = path.parse(file)
  const input = path.join(p.dir, p.base)
  const output = getConvertedFileName(input)
  const exists = fs.existsSync(output)

  const exif = await exiftool.read(input)

  const date = exif.MediaCreateDate || exif.DateTimeOriginal

  // console.log(date.rawValue)
  // console.log(exif['CreateDate: ExifDateTime'])
  try {
    date.rawValue
  } catch (error) {
    // console.log('ERROR --------------')
    // console.log(exif)
  }

  // console.log(exif.CreateDate.year)

  return {
    input,
    output,
    exists,
  }
}

async function copyTags(input, output) {
  // Copy metadata - don't overwrite existing data
  // await execa('exiftool', ['-tagsFromFile', input, output, '-wm', 'cg'])
  await execa('exiftool', [
    '-overwrite_original',
    '-tagsFromFile',
    input,
    output,
    // Seems to only be used in images, not videos
    '-x',
    'ExifImageWidth',
    '-x',
    'ExifImageHeight',
  ])

  const tmpInfoFile = `${output}.txt`
  const newOutput = output.replace('.mp4', '-metadata.mp4')

  await execa('mp4extract', ['moov/udta', input, tmpInfoFile])
    .then(() => {
      console.log(`Found: moov/udta data available for: ${input}`)
    })
    .catch(() => {})

  await execa('mp4extract', ['moov/meta', input, tmpInfoFile])
    .then(() => {
      console.log(`Found: moov/meta data available for: ${input}`)
    })
    .catch(() => {})

  if (fs.existsSync(tmpInfoFile)) {
    console.log('Inject Metadata:')
    console.log('data:', tmpInfoFile)
    console.log('from:', output)
    console.log('to:   ', newOutput)
    await execa('mp4edit', ['--insert', `moov:${tmpInfoFile}`, output, newOutput]).catch(
      console.error
    )

    await fs.unlink(tmpInfoFile).catch(console.error)
    await fs.unlink(output).catch(console.error)
    await fs.rename(newOutput, output).catch(console.error)
  } else {
    console.log('Skip injecting metadata')
    // await fs.rename(newOutput, output).catch(console.error)
  }

  try {
    // await fs.unlink(output).catch(console.error)
    // await fs.rename(newOutput, output).catch(console.error)
  } catch (error) {
    // console.log(e)
  }
}

async function run() {
  console.log('Scanning video files...')
  const files = await candidates()
  STORE.candidates = files.length

  console.log(`...${files.length} videos found`)
  const videos = await files.map(fileInfo)

  // https://video.stackexchange.com/questions/23741/how-to-prevent-ffmpeg-from-dropping-metadata
  // exiftool -TagsFromFile a.MOV "-all:all>all:all" c.MOV

  let j = 0

  const mapper = async (video) => {
    console.log(`üçø ${++j}`.padEnd(5), video)

    if (!video.exists) {
      await convert(video.input, video.output).catch((error) => {
        console.log('---- ERROR ----')
        console.error(error)
      })

      await copyTags(video.input, video.output)
    } else {
    }

    // console.log( `üçø ${++j}`.padEnd(5), video)
    return video
  }

  await pmap(videos, mapper, { concurrency: 1 })

  exiftool.end()
}

run()
