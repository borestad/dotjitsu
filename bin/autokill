#!/usr/local/bin/node

const util = require('util')
const exec = util.promisify(require('child_process').exec)

// # PROCESSNAME = '/bin/ncdu'
// # CPU_TRESHOLD = 99

// # IFS = $'\n'
// # L = $(ps aux | grep $PROCESSNAME)

// # for fn in $L; do
// #         PID = $(echo $fn | awk '{print $2'})
// #         LOAD = $(echo $fn | awk '{print $3'})

// #         echo $LOAD
// #         if [$(echo "$LOAD > $CPU_TRESHOLD" | bc - l) - eq 1]
// #         then
// #                 kill - 9 $PID
// #                 echo "Killed $PID due to treshold"
// #         fi
// # done

async function notify(title, text) {
  await exec(`osascript -e 'display notification "${text}" with title "${title}"'`)
}

async function main() {
  const { stdout, stderr } = await exec('ps -e | grep ncdu')

  // 15009 ??         0:08.13 timeout -s SIGINT 3600s /usr/local/bin/ncdu
  // 15010 ??        22:59.65 /usr/local/bin/ncdu
  // 77570 ttys005    0:00.03 /usr/local/bin/ncdu

  if (stderr) {
    console.error(`error: ${stderr}`)
  }

  const processes = stdout
    .trim()
    .split('\n')
    .map(r => r.split(/\s+/))

  for (const p of processes) {
    // console.log(p)
    const [pid, tty, cputime, ...command] = p

    // Hack: exclude useless processes for autokill (keep for debugging)
    if (!/ncdu|timeout/.test(command[0])) {
      continue
    }

    console.log({
      pid,
      tty,
      cputime,
      command
    })

    // Autokill process that lost it's TTY
    if (tty === '??') {
      const cmd = `/bin/kill -9 ${pid}`

      try {
        await exec(cmd)
        await notify('Autokill success', 'killing ncdu')
      } catch (error) {
        await notify('Autokill error', `killing ncdu failed: ${cmd}`)
      }
    }
  }
}

main()
