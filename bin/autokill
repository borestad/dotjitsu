#!/bin/bash

# Check for gdate (from coreutils)
if ! command -v gdate &>/dev/null; then
  echo "Error: gdate (GNU date) is required but not found."
  exit 1
fi

# Initialize limits
max_cpu_time=""
max_uptime=""
processes=()

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    --max-cpu-time)
      max_cpu_time="$2"
      shift 2
      ;;
    --max-uptime)
      max_uptime="$2"
      shift 2
      ;;
    *)
      processes+=("$1")
      shift
      ;;
  esac
done

# Ensure at least one process is given
if [ "${#processes[@]}" -eq 0 ]; then
  echo "Usage: $0 [--max-cpu-time N] [--max-uptime N] process_name [process_name ...]"
  exit 1
fi

# Function to parse CPU time into seconds
cpu_to_seconds() {
  local time_str="$1"
  if [[ "$time_str" =~ ([0-9]+)-([0-9]+):([0-9]+):([0-9]+) ]]; then
    echo $(( ${BASH_REMATCH[1]} * 86400 + ${BASH_REMATCH[2]} * 3600 + ${BASH_REMATCH[3]} * 60 + ${BASH_REMATCH[4]} ))
  elif [[ "$time_str" =~ ([0-9]+):([0-9]+):([0-9]+) ]]; then
    echo $(( ${BASH_REMATCH[1]} * 3600 + ${BASH_REMATCH[2]} * 60 + ${BASH_REMATCH[3]} ))
  elif [[ "$time_str" =~ ([0-9]+):([0-9]+) ]]; then
    echo $(( ${BASH_REMATCH[1]} * 60 + ${BASH_REMATCH[2]} ))
  else
    echo 0
  fi
}

for proc in "${processes[@]}"; do
  pids=$(pgrep -x "$proc")

  if [ -z "$pids" ]; then
    echo "$proc is not running."
    continue
  fi

  echo "$proc is running:"
  for pid in $pids; do
    start_time=$(ps -p "$pid" -o lstart=)
    start_epoch=$(gdate -d "$start_time" +%s)
    now_epoch=$(gdate +%s)
    uptime=$(( now_epoch - start_epoch ))

    cpu_time_str=$(ps -p "$pid" -o cputime= | awk '{$1=$1;print}')
    cpu_seconds=$(cpu_to_seconds "$cpu_time_str")

    echo "  PID $pid:"
    echo "    Uptime     : ${uptime}s"
    echo "    CPU time   : ${cpu_seconds}s"

    kill_reason=""
    if [[ -n "$max_cpu_time" && "$cpu_seconds" -gt "$max_cpu_time" ]]; then
      kill_reason="CPU time exceeded (${cpu_seconds}s > ${max_cpu_time}s)"
    elif [[ -n "$max_uptime" && "$uptime" -gt "$max_uptime" ]]; then
      kill_reason="Uptime exceeded (${uptime}s > ${max_uptime}s)"
    fi

    if [ -n "$kill_reason" ]; then
      echo "    ‚ùå Killing PID $pid: $kill_reason"
      kill "$pid"
    fi
  done
done
